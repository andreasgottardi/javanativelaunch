plugins {
    id 'java-library'
    id 'application'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
	
	gcc = MINGW + System.getProperty("file.separator") + 'gcc.exe'
	windres = MINGW + System.getProperty("file.separator") + 'windres.exe'
	execPath = MINGW + System.getProperty("path.separator") + System.getenv("PATH")
	
	/* Load path to JDK from gradle.properties. */
	javaHome = JAVA_HOME
	
	mainClass = 'compilerex.Library'
	
	junitvers = '5.7.0'
}

mainClassName = mainClass
version = '0.0.1'

repositories {
    jcenter()
}

dependencies {

	implementation 'org.slf4j:slf4j-api:1.7.30'
	implementation 'ch.qos.logback:logback-core:1.2.3'
	implementation 'ch.qos.logback:logback-classic:1.2.3'
	
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + junitvers
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + junitvers
}

test {
    useJUnitPlatform()
}

jar {
	manifest {
		attributes 'Main-Class': mainClass
	}
}

build.dependsOn clean
build.mustRunAfter clean

task exportDependencies(type: Copy, group: 'distribution', description: 'Exports the application dependencies into a export folder.') {

	dependsOn build
	mustRunAfter build
	
	into "${buildDir}/setup/lib"
	from configurations.runtimeClasspath
}

tasks.withType(Jar) {
	destinationDirectory = file("${buildDir}/setup/lib")
}

/* Deletes an probably existing "java.c" file in "src/main/c" folder. */
task cleanJavaC(type: Delete, group: 'build', description: 'The gcc build task.') {

	dependsOn exportDependencies
	mustRunAfter exportDependencies
	
	delete 'src/main/c/java.c'
}

/* Generates a java.c file from the template with the main class name inserted. */
task generateJavaC(type: Copy, group: 'build', description: 'The gcc build task.') {
	
	dependsOn cleanJavaC
	mustRunAfter cleanJavaC
	
	from("src/main/c"){
      include "java.tpl.c"
      filter{ it.replaceAll('%%MAIN_CLASS%%', mainClass.replaceAll( '\\.', '/' ))}
	}
	into("src/main/c")
	rename('java.tpl.c', 'java.c')
}

/* Deletes an probably existing "java.c" file in "src/main/c" folder. */
task cleanResources(type: Delete, group: 'build', description: '') {

	dependsOn generateJavaC
	mustRunAfter generateJavaC
	
	doLast {
        
        delete 'src/main/c/resources.res'
		"$buildDir" + '/setup/bin'

		mkdir "$buildDir/setup/bin"
		mkdir "$buildDir/setup/lib"
		mkdir "$buildDir/setup/conf"
    }
}

task buildResources(type: Exec, group: 'build', description: ''){
    
	dependsOn cleanResources
	mustRunAfter cleanResources

	workingDir 'src/main/c/'
    environment "PATH", execPath

    commandLine windres, 'resources.rc', '-O', 'coff', '-o', 'resources.res'
}

task getJava (group: 'build', description: 'Downloads Java.'){
	
	dependsOn buildResources
	mustRunAfter buildResources
	doLast {
		ant.get(src: 'https://cdn.azul.com/zulu/bin/zulu15.27.17-ca-jre15.0.0-win_x64.zip', dest: 'build', skipexisting: 'true')
	}
}

task extractJava (type: Copy, group: 'build', description: 'Downloads Java.'){
	
	dependsOn getJava
	mustRunAfter getJava
	
	from zipTree("$buildDir/zulu15.27.17-ca-jre15.0.0-win_x64.zip")
    into "$buildDir/java"
}

task integrateJava (group: 'build', description: 'Downloads Java.'){
	
	dependsOn extractJava
	mustRunAfter extractJava
	
	doLast {
		file("$buildDir/java").listFiles().each { File file ->
			file.listFiles().each { File cont ->
	            ant.move file: cont.absolutePath, todir: "${buildDir}/setup/jre"
	        }
        }
	}
}

task makenativeexec(type: Exec, group: 'build', description: ''){
	
	dependsOn integrateJava
	mustRunAfter integrateJava
	
	workingDir 'src/main/c/'
    environment "PATH", execPath
    
	commandLine gcc,
	'-I"' + javaHome + '\\include"',
	'-I"' + javaHome + '\\include\\win32"',
	'-o', "$buildDir/setup/bin/" + 'runme.exe',
	'-Wall',
	'-Os',
	'-pedantic',
	'-municode',
	'-mwindows',
	'main.c', 'java.c', 'logging.c', 'resources.res',
	'-L"' + javaHome + '\\lib"',
	'-ljvm'
	
	standardOutput = new ByteArrayOutputStream()
	ext.output = {
		return standardOutput.toString()
	}	
}
